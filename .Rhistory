c(variables_of_interest[i], cols)]
# stores the weight information for variable of interest
weight_info = variable_info[which(variable_info$QN_Variable == variables_of_interest[i]),]
# creates common_weight and cluster variable for each year of the
# ith variable
variables_df$common_weight = NA
variables_df$cluster = NA
for(j in 1:length(years)){
# find the rows for jth year
loc = which(variables_df$Survey_Year == years[j])
# determine what common weight to use for jth year by using the
# information from weight_info. If "AB" is present then set common
# weight to the core weight, if "A" is present then set common
# weight to be moduale A weight, but if "B" is present then set
# common weight to be moduale B weight.
if(weight_info[survey_years[j]] == "AB"){
variables_df$common_weight[loc] = variables_df[loc, core.weight]
} else if(weight_info[survey_years[j]] == "A"){
variables_df$common_weight[loc] = variables_df[loc, moda.weight]
} else if(weight_info[survey_years[j]] == "B"){
variables_df$common_weight[loc] = variables_df[loc, modb.weight]
}
# to create the cluster variable calculate the number of schools in a
# district. If the number of schools is 1 then set cluster to be
# class id, if the number of schools is greater than 1 then set
# cluster to be school id.
num.school = length(unique(variables_df[loc,
hkcs.schoolid]))
if(num.school == 1){
variables_df$cluster[loc] = paste0(variables_df[loc, hkcs.classid],
"_",
years[j])
} else if(num.school > 1){
variables_df$cluster[loc] = paste0(variables_df[loc, hkcs.schoolid],
"_",
years[j])
}
}
# saves dataset in a list
variables_datasets[[i]] = variables_df[, c(variables_of_interest[i],
cols, "cluster", "common_weight")]
}
# creates common_weight and cluster variable for each year of the
# ith variable
variables_df$common_weight = NA
variables_df$cluster = NA
# creates dataset with survey information and variable of interest
# Only keep data where the variable of interest doesn't have any missing
# responses. Also only keep the following columns: Variable of interest,
# survey year, time variable, school id, class id, and weight variable.
variables_df = hkcs.data[which(!is.na(hkcs.data[, variables_of_interest[i]])),
c(variables_of_interest[i], cols)]
i = 1
# create dataset for each variable so that the common weight is there
variables_datasets = list()
# creates dataset with survey information and variable of interest
# Only keep data where the variable of interest doesn't have any missing
# responses. Also only keep the following columns: Variable of interest,
# survey year, time variable, school id, class id, and weight variable.
variables_df = hkcs.data[which(!is.na(hkcs.data[, variables_of_interest[i]])),
c(variables_of_interest[i], cols)]
cols
hkcs.classid
district_name = district
district_name
state = state.var
state
data = hkcs.data.complete
fpc.data = fpc.data.var
fpc.var = fpc.var
fpc.var
hkcs.strata = hkcs.strata.var
hkcs.survey.year = survey.year.var
hkcs.classid = classid.var
hkcs.classid
hkcs.schoolid = schoolid.var
moda.weight = moda.weight.var
modb.weight = modb.weight.var
core.weight = core.weight.var
trend = "Yes"
prefix = "QN_"
variables = NULL
# subset the data for the current district if a district report,
# if not a district report then subsetting is not necessary
if(is.null(district_name)){
hkcs.data = data
} else {
hkcs.data = data[which(data$District_Name == district_name), ]
}
# Create a new time variable for trend analysis
hkcs.data$time.v1 = (hkcs.data[, hkcs.survey.year] - 2013)/2
# add fpc if data is provided. Uses strata variable to merge.
if(!is.null(fpc.data)){
hkcs.data = merge(hkcs.data, fpc.data, by = hkcs.strata)
hkcs.data[, hkcs.strata] <- as.character(hkcs.data[, hkcs.strata])
}
# find unique years and order them in ascending order
years_list = unique(hkcs.data[, hkcs.survey.year])
years = years_list[order(years_list)]
survey_years = NULL
for(i in 1:length(years)){
survey_years[i] = paste0("Survey_", years[i] %% 100)
}
# locate all the instances where there are QN variables
if(!is.null(prefix) & is.null(variables)){
variables_of_interest.loc = grep(
paste0("^", prefix), colnames(hkcs.data))
variables_of_interest = colnames(hkcs.data)[variables_of_interest.loc]
} else if(!is.null(variables) & is.null(prefix)){
variables_of_interest = variables
}
# columns not NULL
cols = c(hkcs.survey.year, "time.v1", hkcs.strata, hkcs.schoolid, hkcs.classid,
moda.weight, modb.weight, core.weight, fpc.var)
cols
# create dataset for each variable so that the common weight is there
variables_datasets = list()
for(i in 1:length(variables_of_interest)){
# creates dataset with survey information and variable of interest
# Only keep data where the variable of interest doesn't have any missing
# responses. Also only keep the following columns: Variable of interest,
# survey year, time variable, school id, class id, and weight variable.
variables_df = hkcs.data[which(!is.na(hkcs.data[, variables_of_interest[i]])),
c(variables_of_interest[i], cols)]
# stores the weight information for variable of interest
weight_info = variable_info[which(variable_info$QN_Variable == variables_of_interest[i]),]
# creates common_weight and cluster variable for each year of the
# ith variable
variables_df$common_weight = NA
variables_df$cluster = NA
for(j in 1:length(years)){
# find the rows for jth year
loc = which(variables_df$Survey_Year == years[j])
# determine what common weight to use for jth year by using the
# information from weight_info. If "AB" is present then set common
# weight to the core weight, if "A" is present then set common
# weight to be moduale A weight, but if "B" is present then set
# common weight to be moduale B weight.
if(weight_info[survey_years[j]] == "AB"){
variables_df$common_weight[loc] = variables_df[loc, core.weight]
} else if(weight_info[survey_years[j]] == "A"){
variables_df$common_weight[loc] = variables_df[loc, moda.weight]
} else if(weight_info[survey_years[j]] == "B"){
variables_df$common_weight[loc] = variables_df[loc, modb.weight]
}
# to create the cluster variable calculate the number of schools in a
# district. If the number of schools is 1 then set cluster to be
# class id, if the number of schools is greater than 1 then set
# cluster to be school id.
num.school = length(unique(variables_df[loc,
hkcs.schoolid]))
if(num.school == 1){
variables_df$cluster[loc] = paste0(variables_df[loc, hkcs.classid],
"_",
years[j])
} else if(num.school > 1){
variables_df$cluster[loc] = paste0(variables_df[loc, hkcs.schoolid],
"_",
years[j])
}
}
# saves dataset in a list
variables_datasets[[i]] = variables_df[, c(variables_of_interest[i],
cols, "cluster", "common_weight")]
}
# create table
final.table = data.frame(
'indicator' = rep(NA, length(variables_of_interest)),
'2013' = rep(NA, length(variables_of_interest)),
'2015' = rep(NA, length(variables_of_interest)),
'2017' = rep(NA, length(variables_of_interest))
)
# add trend variable to dataset if they want the trend.
if(trend == 'Yes'){
final.table$trend = NA
}
# suppression result
surpress = ". (.-.)"
# define strata. For district reports use survey year and for state report
# use hkcs.strata
if(!is.null(district_name)){
strata.formula = as.formula(paste0("~", hkcs.survey.year))
} else {
strata.formula = as.formula(paste0("~", hkcs.strata))
}
# define fpc
if(is.null(fpc.data)){
fpc.formula = NULL
} else {
fpc.formula = as.formula(paste0("~", fpc.var))
}
# define the year labels for the dataframe
year.colnames = c("X2013", "X2015", "X2017")
for(i in 1:length(variables_of_interest)){
# create formula for variable of interest
freq.formula = as.formula(paste0("~", variables_of_interest[i]))
# stores the weight information for variable of interest
weight_info = variable_info[which(variable_info$QN_Variable == variables_of_interest[i]),]
# Stores variable description
final.table[i, 'indicator'] = as.character(weight_info$variable_description)
# calculate proportions per year
count = list()
for(j in 1:length(years)){
# save the data for jth year to be used in for loop
year.data = variables_datasets[[i]][which(variables_datasets[[i]][, hkcs.survey.year] == years[j]), ]
# if strata is provided because it's state data or fpc is being provided,
# then make sure that each strata has more than one school id. In order to
# do this, count the number of stratas with one school id. If count is
# greater than 0, then you can't report proportions for jth year. Use count in
# the if statement after this. Set count[[j]] = 0 if strata is not reported
if(!is.null(hkcs.strata)){
strata.ids = unique(year.data[, hkcs.strata])
count[[j]] = 0
for(a in 1:length(strata.ids)){
temp = year.data[which(year.data[, hkcs.strata] == strata.ids[a]), ]
psu.1 = as.numeric(length(unique(temp[, hkcs.schoolid])) == 1)
count[[j]] = count[[j]] + psu.1
}
} else {
count[[j]] = 0
}
# If there are fewer than 30 students responding or less than 3, or
# 0 students responded yes this would also mean that there are 0
# students responding yes or everyone responded yes then surpress the
# years proportion information else calculate the proportion of yes'
# for that year
if(nrow(year.data) < 30 |
sum(year.data[, variables_of_interest[i]]) < 3 |
sum(year.data[, variables_of_interest[i]]) == nrow(year.data)
){
final.table[i, year.colnames[j]] = surpress
} else if(count[[j]] == 0){
# create study design for data during jth year of ith variable
# where we use id equal to cluster, weight equal to common weight,
# strata equal to survey_year and use the jth years data.
hkcs.des.year = svydesign(id = ~cluster,
weight = ~common_weight,
strata = strata.formula,
fpc = fpc.formula,
data = year.data,
nest = FALSE)
# calculate the proportion estimates and CI for jth year of ith variable
ci = svyciprop(freq.formula, hkcs.des.year, method = "xlogit")
coef = format(as.vector(ci)*100, digits = 1, nsmall = 1, trim = TRUE) # coefficient
ci.coef = format(attr(ci, "ci")*100, digits = 1, nsmall = 1, trim = TRUE) # CI
# reformat the structure of the output so that everything is lined up
coef.char = ifelse(length(strsplit(coef, "")[[1]]) == 4, coef, paste0(" ", coef))
ci.low.char = ifelse(length(strsplit(ci.coef[1], "")[[1]]) == 4,
as.character(ci.coef[1]),
paste0(" ", ci.coef[1]))
ci.hi.char = ifelse(length(strsplit(ci.coef[2], "")[[1]]) == 4,
as.character(ci.coef[2]),
paste0(" ", ci.coef[2]))
# determine if ith variable during jth year needs an asterisk
asterisk = ifelse(weight_info[survey_years[j]] != "AB",
"*", " ")
# combine estimate and CI to be one string
final.table[i, year.colnames[j]] = paste0(
coef.char, asterisk, "(",
ci.low.char," - ",
ci.hi.char,")")
} else if(!is.null(hkcs.strata) & count[[j]] > 0){
final.table[i, year.colnames[j]] = "-"
}
}
# if district is requesting trend analysis, then trend = "Yes" and the
# logistic model will be evaluated to see if the variable of interest
# has a significant linear trend.
count.total = count[[1]] + count[[2]] + count[[3]]
if(trend == "Yes" & count.total > 0){
final.table[i, "trend"] = "~"
} else if(trend == "Yes" & is.null(count)){
# create design variable using cluster, the common weight, survey year
# and the variable's data set.
hkcs.des = svydesign(id = ~cluster,
weight = ~common_weight,
strata = strata.formula,
fpc = fpc.formula,
data = variables_datasets[[i]],
nest = FALSE)
# create formula using time.v1 as the time variable
trend.formula = as.formula(paste0(variables_of_interest[i],
" ~ time.v1"))
# create the trend model using the trend formula, study design for the
# variable, and the quasibinomial distribution.
trend.model = svyglm(trend.formula, family = quasibinomial(link = "logit"),
design = hkcs.des)
# Determine if the time variable of the trend model was a significant increase
# or decrease. If the estimate is not significant (> 0.05) then send column
# a blank, however, if the estimate is significant and greater than zero,
# then trend is set to "Increase" otherwise the trend is less than zero,
# and we set trend to equal "Decease"
result.summary = summary(trend.model)$coefficients
if(result.summary["time.v1", "Pr(>|t|)"] <= 0.05){
final.table[i, "trend"] = ifelse(result.summary["time.v1", "Estimate"] > 0,
"Increase", "Decrease")
} else {
final.table[i, "trend"] = ""
}
}
}
# Create State Report -----------------------------------------------------
# set variables
hkcs.data.complete = state.hkcs
district = NULL
state.var = "Colorado"
fpc.data.var = state.fpc
fpc.var = "X_rate_"
hkcs.strata.var = "Strata_Year"
survey.year.var = "Survey_Year"
classid.var = NULL
schoolid.var = "SchoolID"
moda.weight.var = "Weight_moda"
modb.weight.var = "Weight_modb"
core.weight.var = "Weight_both"
rmarkdown::render(input = "/Users/mayracoronadogarcia/Documents/GitHub/HKCSPracticum/rMarkdownFiles/trend_report.Rmd",
output_format = "pdf_document",
output_file = paste0(state.var, "_", "Trend Report.pdf"),
output_dir = "/Users/mayracoronadogarcia/Documents/Practicum/Data Analysis/State_Report_test/")
rmarkdown::render(input = "/Users/mayracoronadogarcia/Documents/GitHub/HKCSPracticum/rMarkdownFiles/trend_report.Rmd",
output_format = "pdf_document",
output_file = paste0(state.var, "_", "Trend Report.pdf"),
output_dir = "/Users/mayracoronadogarcia/Documents/Practicum/Data Analysis/State_Report_test/")
rmarkdown::render(input = "/Users/mayracoronadogarcia/Documents/GitHub/HKCSPracticum/rMarkdownFiles/trend_report.Rmd",
output_format = "pdf_document",
output_file = paste0(state.var, "_", "Trend Report.pdf"),
output_dir = "/Users/mayracoronadogarcia/Documents/Practicum/Data Analysis/State_Report_test/")
is.null(state)
rmarkdown::render(input = "/Users/mayracoronadogarcia/Documents/GitHub/HKCSPracticum/rMarkdownFiles/trend_report.Rmd",
output_format = "pdf_document",
output_file = paste0(state.var, "_", "Trend Report.pdf"),
output_dir = "/Users/mayracoronadogarcia/Documents/Practicum/Data Analysis/State_Report_test/")
state.fpc = read.csv("/Users/mayracoronadogarcia/Documents/Practicum/Data Analysis/State_trend_fpc_final.csv")
state.hkcs = read.csv("/Users/mayracoronadogarcia/Documents/Practicum/Data Analysis/State_Trend_HS_Final.csv")
length(unique(as.character(state.fpc$Strata_Year))) ==
length(unique(as.character(state.hkcs$Strata_Year)))
table(c(unique(as.character(state.fpc$Strata_Year)),
unique(as.character(state.hkcs$Strata_Year))))
test.df = merge(state.hkcs, state.fpc, by = "Strata_Year")
state.fpc = read.csv("/Users/mayracoronadogarcia/Documents/Practicum/Data Analysis/State_trend_fpc_final.csv")
state.hkcs = read.csv("/Users/mayracoronadogarcia/Documents/Practicum/Data Analysis/State_Trend_HS_Final.csv")
length(unique(as.character(state.fpc$Strata_Year))) ==
length(unique(as.character(state.hkcs$Strata_Year)))
table(c(unique(as.character(state.fpc$Strata_Year)),
unique(as.character(state.hkcs$Strata_Year))))
test.df = merge(state.hkcs, state.fpc, by = "Strata_Year")
length(unique(as.character(test.df$Strata_Year)))
table(test.df$Strata)
length(table(test.df$SchoolID))
table(test.df$Strata_Year)
test.df$cluster = paste0(
test.df$SchoolID, "_", test.df$Survey_Year
)
# QN_ACTIVITY for all the years
svydesign(ids = ~cluster, strata = ~Strata_Year,
fpc = ~X_rate_, weight = ~Weight_both,
data = test.df)
year.data.test = variables_datasets[[1]][
which(variables_datasets[[1]]$Survey_Year == "2017"),
]
year.data.test$Strata_Year <- as.character(
year.data.test$Strata_Year
)
test.design = svydesign(ids = ~cluster, strata = ~Strata_Year,
fpc = ~X_rate_, weight = ~Weight_both,
data = year.data.test
)
test.df = merge(state.hkcs, state.fpc, by = "Strata_Year")
table(test.df$Strata)
length(table(test.df$SchoolID))
table(test.df$Strata_Year)
# Load Data ---------------------------------------------------------------
variable_info = read.csv(paste0(data.folder, 'HS Snapshot trend variables.csv'))
# Set data.folder to location where data is located -----------------------
data.folder = "/Users/mayracoronadogarcia/Documents/Practicum/Data Analysis/"
# Load Data ---------------------------------------------------------------
variable_info = read.csv(paste0(data.folder, 'HS Snapshot trend variables.csv'))
state.fpc = read.csv(paste0(data.folder, "State_trend_fpc_final.csv"))
state.hkcs = read.csv(paste0(data.folder, "State_Trend_HS_Final.csv"))
# Create Data Sets for Each Variable --------------------------------------
# creates a list of outcome variables of interest
variables_of_interest.loc = grep("^QN_", colnames(test.df))
variables_of_interest = colnames(test.df)[variables_of_interest.loc]
variables_of_interest
# QN_ACTIVITY for all the years
svydesign(ids = ~cluster, strata = ~Strata_Year,
fpc = ~X_rate_, weight = ~Weight_both,
data = test.df)
# Set data.folder to location where data is located -----------------------
data.folder = "/Users/mayracoronadogarcia/Documents/Practicum/Data Analysis/"
# Load Data ---------------------------------------------------------------
variable_info = read.csv(paste0(data.folder, 'HS Snapshot trend variables.csv'))
state.fpc = read.csv(paste0(data.folder, "State_trend_fpc_final.csv"))
state.hkcs = read.csv(paste0(data.folder, "State_Trend_HS_Final.csv"))
# Merge State data to FPC data --------------------------------------------
test.df = merge(state.hkcs, state.fpc, by = "Strata_Year")
test.df$cluster = paste0(
test.df$SchoolID, "_", test.df$Survey_Year
)
# QN_ACTIVITY for all the years
svydesign(ids = ~cluster, strata = ~Strata_Year,
fpc = ~X_rate_, weight = ~Weight_both,
data = test.df)
year.data.test = variables_datasets[[1]][
which(variables_datasets[[1]]$Survey_Year == "2017"),
]
year.data.test = test.df[which(test.df$Survey_Year == "2017"),
c("cluster", "strata_year", "X_rate_",
"Weight_both", "QN_ACTIVITY", "Survey_Year")]
colnames(test.df)
year.data.test = test.df[which(test.df$Survey_Year == "2017"),
c("cluster", "strata_year", "X_rate_" # ,
#  "Weight_both", "QN_ACTIVITY", "Survey_Year",
#"SchoolID"
)]
year.data.test = test.df[which(test.df$Survey_Year == "2017"),
c("cluster", "Strata_Year", "X_rate_",
"Weight_both", "QN_ACTIVITY", "Survey_Year",
"SchoolID")]
# QN_ACTIVITY for 2017
year.data.test = test.df[which(test.df$Survey_Year == "2017"),
c("cluster", "Strata_Year", "X_rate_",
"Weight_both", "QN_ACTIVITY", "Survey_Year",
"SchoolID")]
svydesign(ids = ~cluster, strata = ~Strata_Year,
fpc = ~X_rate_, weight = ~Weight_both,
data = year.data.df)
# QN_ACTIVITY for 2017
year.data.test = test.df[which(test.df$Survey_Year == "2017"),
c("cluster", "Strata_Year", "X_rate_",
"Weight_both", "QN_ACTIVITY", "Survey_Year",
"SchoolID")]
svydesign(ids = ~cluster, strata = ~Strata_Year,
fpc = ~X_rate_, weight = ~Weight_both,
data = year.data.test)
table(year.data.test$Strata_Year)
# QN_ACTIVITY for 2017
year.data.test = test.df[which(test.df$Survey_Year == "2017"),
c("cluster", "Strata_Year", "X_rate_",
"Weight_both", "QN_ACTIVITY", "Survey_Year",
"SchoolID")]
year.data.test$Strata_Year <- as.character(
year.data.test$Strata_Year
)
table(year.data.test$Strata_Year)
svydesign(ids = ~cluster, strata = ~Strata_Year,
fpc = ~X_rate_, weight = ~Weight_both,
data = year.data.test)
test.design = svydesign(ids = ~cluster, strata = ~Strata_Year,
fpc = ~X_rate_, weight = ~Weight_both,
data = year.data.test
)
# QN_ACTIVITY for 2017
year.data.test = test.df[which(test.df$Survey_Year == "2017"),
c("cluster", "Strata_Year", "X_rate_",
"Weight_both", "QN_ALC_RIDE", "Survey_Year",
"SchoolID")]
year.data.test$Strata_Year <- as.character(
year.data.test$Strata_Year
)
table(year.data.test$Strata_Year)
is.na(year.data.test$QN_ALC_RIDE)
# QN_ACTIVITY for 2017
year.data.test = test.df[which(test.df$Survey_Year == "2017" &
!is.na(test.df$QN_ALC_RIDE)),
c("cluster", "Strata_Year", "X_rate_",
"Weight_both", "QN_ALC_RIDE", "Survey_Year",
"SchoolID")]
year.data.test$Strata_Year <- as.character(
year.data.test$Strata_Year
)
nrow(year.data.test)
year.data.test$Strata_Year <- as.character(
year.data.test$Strata_Year
)
table(year.data.test$Strata_Year)
variable_info
# Calculate the Proportion of QN_ALC_RIDE during 2017 ---------------------
variable_info[16, ]
# Calculate the Proportion of QN_ALC_RIDE during 2017 ---------------------
variable_info[16, c("QN_Variable", "Survey_17")]
# define survey design using core weight
test.designsvydesign(ids = ~cluster, strata = ~Strata_Year,
fpc = ~X_rate_, weight = ~Weight_both,
data = year.data.test)
# define survey design using core weight
test.design = svydesign(ids = ~cluster, strata = ~Strata_Year,
fpc = ~X_rate_, weight = ~Weight_both,
data = year.data.test)
# define formula
freq.formula = ~QN_ALC_RIDE
# calculate proportion
svyciprop(freq.formula, test.design, method = "xlogit")
table(year.data.test$Strata_Year)
# Calculate the number of Schools in strata 14_2017 -----------------------
# because of the error, I exained strata 14_2017 by locating all the responses
# for Strata_Year = to "14_2017"
strata.14.2017 = year.data.test[which(year.data.test$Strata_Year == "14_2017"), ]
table(strata.14.2017$SchoolID)
# in this data set
unique(strata.14.2017$SchoolID)
# in this data set find all the unique school id's
unique(strata.14.2017$SchoolID)
# how to find if there is one psu
strata.ids = unique(year.data.test$Strata_Year)
count = 0
for(i in 1:length(strata.ids)){
temp = year.data.test[which(year.data.test$Strata_Year == strata.ids[i]), ]
psu.1 = as.numeric(length(unique(temp$SchoolID)) == 1)
count = count + psu.1
}
count
